<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Thoughts while I learn stuff</title>
    <link>https://objectuser.github.io/posts/</link>
    <description>Recent content in Posts on Thoughts while I learn stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Dec 2017 16:00:00 -0600</lastBuildDate>
    
	<atom:link href="https://objectuser.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git Rebase Like Cherry Pick</title>
      <link>https://objectuser.github.io/posts/2017-12-31-git-rebase-like-cherry-pick/</link>
      <pubDate>Sun, 31 Dec 2017 16:00:00 -0600</pubDate>
      
      <guid>https://objectuser.github.io/posts/2017-12-31-git-rebase-like-cherry-pick/</guid>
      <description>Sometimes I want to move a commit between branches. This is easy with git cherry-pick.
However, sometimes I want this commit inserted into my branch at a specific point. This can be done with an interactive rebase.
An interactive rebase lists the commits to be applied to the branch with respect to, usually, the master branch. I usually use git rebase -i to squash commits. But there&amp;rsquo;s nothing magic about the list of commits provided by the rebase.</description>
    </item>
    
    <item>
      <title>Ecto Migrate To</title>
      <link>https://objectuser.github.io/posts/2017-10-22-ecto-migrate-to/</link>
      <pubDate>Sun, 22 Oct 2017 15:00:00 -0600</pubDate>
      
      <guid>https://objectuser.github.io/posts/2017-10-22-ecto-migrate-to/</guid>
      <description>Ecto has a nice feature that allows a target migration to be specified.
The example is:
mix ecto.migrate --to 20080906120000  The ID above is the prefix of the migration file name.
I used this when I had a set of migrations to run, but needed to do intermediate work as each one was applied. This made it really easy.</description>
    </item>
    
    <item>
      <title>Unbalanced Postgres Partitions</title>
      <link>https://objectuser.github.io/posts/2017-09-27-unbalanced-postgres-partitions/</link>
      <pubDate>Wed, 27 Sep 2017 13:00:00 -0600</pubDate>
      
      <guid>https://objectuser.github.io/posts/2017-09-27-unbalanced-postgres-partitions/</guid>
      <description>I recently needed to partition a large table in Postgres. The table is approaching 600M rows. It had a sufficient number of rows that I was not able to create an index without running out of temporary storage on my cloud-hosted server.
Most of my reading on Postgres partitioning talked about partitioning by date. However, few of my queries are of the &amp;ldquo;recent rows&amp;rdquo; variety, so that didn&amp;rsquo;t seem like an optimal approach.</description>
    </item>
    
    <item>
      <title>Where Rails Does the Wrong Thing</title>
      <link>https://objectuser.github.io/posts/2017-09-19-where-rails-does-the-wrong-thing/</link>
      <pubDate>Tue, 19 Sep 2017 10:30:00 -0600</pubDate>
      
      <guid>https://objectuser.github.io/posts/2017-09-19-where-rails-does-the-wrong-thing/</guid>
      <description>I don&amp;rsquo;t have a lot of experience in Rails. I&amp;rsquo;ve used it over the last year, but most of my time during that period has been in Elixir.
Recently, due to how Postgres partial indexes work, I wanted to replace some parameter markers in my queries with manifest (i.e., hard coded) values. This was only for things like processing states and the like. I still wanted values like keys and dates to be parameterized for DB efficiency.</description>
    </item>
    
    <item>
      <title>Postgres Partial Indexes</title>
      <link>https://objectuser.github.io/posts/2017-09-17-postgres-partial-indexes/</link>
      <pubDate>Sun, 17 Sep 2017 09:48:47 -0600</pubDate>
      
      <guid>https://objectuser.github.io/posts/2017-09-17-postgres-partial-indexes/</guid>
      <description>I have a large Postgres database that backs some data services used by a few other apps. This database is not large by Postgres standards, having about 600M rows.
I did some reading on Postgres indexes and decided that a series of partial indexes would likely provide the best performance for our variety of queries. However, I was confused that while my analysis revealed that the indexes I created would serve those queries well, Postgres never seemed to use them.</description>
    </item>
    
  </channel>
</rss>